#!/usr/bin/env node

const path = require('path');
const fs = require('fs');
const { Readable } = require('stream');
const clap = require('clap');
const { stringifyInfo, stringifyChunked } = require('@discoveryjs/json-ext');
const { encode: encodeJsonxl } = require('../lib/tmp/jsonxl-snapshot9');
const commonOptions = require('../lib/cli');
const getData = require('../lib/data');
const { createPipelineEventHandler } = require('../lib/shared/data-pipeline');
const { isReadableStream } = require('../lib/shared/utils');

function parcelFromPayload(payload, options) {
    if (isReadableStream(payload)) {
        return {
            stream: payload,
            get size() {
                if (payload.path) {
                    try {
                        return fs.statSync(payload.path).size;
                    } catch {}
                }

                // return undefined when a size can't be estimated
            }
        };
    }

    if (ArrayBuffer.isView(payload)) {
        return {
            stream: Readable.from(payload),
            size: payload.byteLength
        };
    }

    if (options.experimentalJsonxl) {
        // TODO: encode with jsonxl stream & buffer when needed
        const jsonxlEncoded = Buffer.from(encodeJsonxl(payload));

        return {
            stream: Readable.from(jsonxlEncoded),
            size: jsonxlEncoded.byteLength
        };
    }

    return {
        stream: Readable.from(stringifyChunked(payload, null, options.pretty)),
        get size() {
            const payloadInfo = stringifyInfo(payload, null, null, { async: true });

            if (payloadInfo && !payloadInfo.circular.length) {
                return payloadInfo.bytes;
            }

            // return undefined when a size can't be estimated
        }
    };
}

// define command
const command = clap.command('discovery-data [config] [model]')
    .version(require('../package.json').version)
    .option(...commonOptions.config)
    .option(...commonOptions.model)
    .option(...commonOptions.experimentalJsonxl)
    .option('--pretty [indent]', 'Pretty print with optionally specified indentation (4 spaces by default when enabled)', (value = 4) => Number(value) || false, false)
    .option('-o, --output <filename>', 'Output file',
        (value = '') => path.resolve(process.cwd(), value)
    )
    .action(async function({ options, args }) {
        const configFile = options.config || args[0];
        const model = options.model || args[1];
        const outputFile = options.output || null;
        const pretty = options.pretty;
        const sendMessageToParent = typeof process.send === 'function'
            ? message => process.send(message)
            : undefined;
        const createPlanEventHandler = sendMessageToParent
            ? (fn) => createPipelineEventHandler(fn, sendMessageToParent)
            : undefined;

        const payload = await getData({
            createPlanEventHandler,
            configFile,
            model,
            pretty
        });

        const parcel = parcelFromPayload(payload, options);

        if (outputFile) {
            parcel.stream.pipe(fs.createWriteStream(outputFile));
            return;
        }

        // send data to parent process if run as a child process
        if (typeof sendMessageToParent === 'function') {
            sendMessageToParent({
                payload: 'stream',
                createdAt: new Date(),
                size: parcel.size
            });

            return new Promise((resolve, reject) => {
                parcel.stream
                    .on('error', reject)
                    .pipe(fs.createWriteStream(null, { fd: 4 }))
                    .on('finish', resolve)
                    .on('error', reject);
            });
        }

        // otherwise write to stdout
        parcel.stream.pipe(process.stdout);
    });

// run command
try {
    command.run();
} catch (e) {
    // output user frendly message if cli error
    if (e instanceof clap.Error) {
        console.error(e.message || e);
        process.exit(2);
    }

    // otherwise re-throw exception
    throw e;
}
